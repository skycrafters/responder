flows:
  - rule: NonCompliantUserCreated
    provider: AWS
    enabled: true
    sequential:
      - command: SendDiscord
        template: aws-event
      - command: SendSlack
        template: aws-event
      - command: SendEmail
      - command: SendSlack
        message: I will wait 10 seconds and take action if none 
      - command: SendDiscord
        message: I will wait 10 seconds and take action if none taken 
      - command: Wait
        duration: 10
      - rule: check
      - command: SendDiscord
        message:
          header: "Will remove non-compliant user"
          values:
            - label: "Removing user"
              value: "$.event.rawEvent.detail.requestParameters.userName" 
      # - command: SendDiscord
      #   template: aws-event
      - command: SendSlack
        message:
          header: "Will remove non-compliant user"
          values:
            - label: "Removing user"
              value: "$.event.rawEvent.detail.requestParameters.userName"
      - rule: remediate
      - command: SendDiscord
        message: "Non-compliant user removed"      
      - command: SendSlack
        message: "Non-compliant user removed"

  - rule: UnauthorizedInstanceCreated
    provider: AWS
    sequential:
      - command: SendSlack
        template: aws-event
        # adding discord
      - command: SendDiscord
        template: aws-event
        # adding discord
      - command: SendEmail
      - command: SendSlack
        message: I will wait 2 minutes and take action if none taken
        # adding discord
      - command: SendDiscord
        message: I will wait 2 minutes and take action if none taken
        # adding discord 
      - command: Wait
        duration: 120
      - rule: check
      - command: SendSlack
        message: Will terminate instances
        # adding discord
      - command: SendDiscord
        message: Will terminate instances
        # adding discord
      - rule: remediate

  - rule: SuspiciousLoginHour
    provider: AWS
    parallel:
      - command: SendSlack
        template: aws-event
        # adding discord
      - command: SendDiscord
        message: Log in at Suspicious Hour Detected
        template: aws-event  
        # adding discord
      - command: SendEmail

  - rule: SuspiciousLoginIP
    provider: AWS
    enabled: true
    parallel:
      - command: SendSlack
        template: aws-event
      - command: SendDiscord
        message: Log in from Suspicious IP Detected
        template: aws-event  
      - command: SendEmail

  - rule: RootLogin
    provider: AWS
    enabled: true
    parallel:
      - command: SendSlack
        message:
          header: "Root has logged in"
          values:
            - label: "Account"
              value: "$.event.rawEvent.account"
            - label: "From"
              value: "$.event.rawEvent.detail.sourceIPAddress"
      - command: SendDiscord
        message: 
          header: "Root has logged in"
          values:
            - label: "Account"
              value: "$.event.rawEvent.account"
            - label: "From"
              value: "$.event.rawEvent.detail.sourceIPAddress"
      - command: SendEmail
        subject: "Root has logged in!"


  # - rule: "@raphbot/instanceCreated"
  #   instanceType: "t2.micro"